on:
    pull_request:
    push:
        tags:
            - "v*"

jobs:
    # Determine if this is a release
    check-release:
        runs-on: ubuntu-latest
        outputs:
            is_release: ${{ startsWith(github.ref, 'refs/tags/v') }}
            version: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || '' }}
        steps:
            - run: echo "Checking if this is a release build"

    # Create the targets matrix from the targets.json config file
    prepare-config:
        runs-on: ubuntu-latest
        needs: check-release
        # if: ${{ needs.check-release.outputs.is_release == 'true' }}
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            - uses: actions/checkout@v4
            - name: Generate build matrix
              id: set-matrix
              run: echo matrix={"include":$(cat release-config/targets-small.json)} >> $GITHUB_OUTPUT

    # Build binaries
    build:
        needs: [prepare-config]
        name: Build ${{ matrix.name }}
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix: ${{ fromJson(needs.prepare-config.outputs.matrix) }}

        steps:
            - uses: actions/checkout@v4

            - name: Download the uplc-wasm archive
              run: curl -LO 'https://github.com/mpizenberg/uplc-wasm/releases/download/v0.3.0/my-artifact.zip'
            - run: unzip my-artifact.zip -d cli/pkg-uplc-wasm

            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install Cross (if needed)
              if: ${{ matrix.use_cross }}
              run: cargo install cross

            - name: Build Binary
              if: ${{ !matrix.use_cross }}
              run: cargo build --release --target ${{ matrix.target }}

            - name: Build Binary with Cross
              if: ${{ matrix.use_cross }}
              run: cross build --release --target ${{ matrix.target }}

            - name: Prepare Binary
              shell: bash
              run: |
                  mkdir -p release
                  if [[ "${{ runner.os }}" == "Windows" ]]; then
                    cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/${{ matrix.asset_name }}
                  else
                    cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/${{ matrix.asset_name }}
                    chmod +x release/${{ matrix.asset_name }}
                  fi

            - name: Upload Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ matrix.name }}
                  path: release/${{ matrix.asset_name }}
                  if-no-files-found: error
                  retention-days: 5
